'use strict';

const ADS_COUNT = 10;
const OFFER_TITLES = [
  'Лучшие аппартаменты в Токио',
  'Уютное местечко в центре Токио',
  'Супер - пупер жильё!',
];
const OFFER_TYPES = [
  'palace',
  'flat',
  'house',
  'bungalow',
];
const TIME_POINTS = [
  '12:00',
  '13:00',
  '14:00',
];
const OFFER_FEATURES = [
  'wifi',
  'dishwasher',
  'parking',
  'washer',
  'elevator',
  'conditioner',
];
const OFFER_DESCRIPTION = [
  'Новая, современная дизайнерская квартира после евроремонта. 24-й этаж и панорамное остекление от пола до потолка - потрясающий вид и удивительные закаты каждый вечер!',
  'Все необходимое для Вашего отдыха и вещей. Есть кондиционер, стиральная машинка, плита с духовкой. В санузле установлена ванна. В кухне-студии диван и второй телевизор. Квартира ухожена, сдается на длятельный срок без изменения цены в летний период.',
  'Квартира с евроремонтом. Тёплый дом из красного кирпича. Квартира сдаётся с мебелью и техникой. Тепловой счётчик на отопление',
];
const OFFER_PHOTOS = [
  'http://o0.github.io/assets/images/tokyo/hotel1.jpg',
  'http://o0.github.io/assets/images/tokyo/hotel2.jpg',
  'http://o0.github.io/assets/images/tokyo/hotel3.jpg',
];

const checkMinMaxArguments = (min, max) => {
  if (min > max || min < 0) {
    throw 'Wrong function arguments. Minimum value must be 0 or positive and lower or equal to maximum';
  }
}

const getRandomIntegerInclusive = (min, max) => {
  checkMinMaxArguments(min, max);
  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#getting_a_random_integer_between_two_values_inclusive
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1) + min);
}

const getRandomFloatInclusive = (min, max, precision = 0) => {
  checkMinMaxArguments(min, max);
  if (!Number.isInteger(precision) || precision < 0) {
    throw 'Precision must be integer Number and greater than 0';
  }

  let randomFloat = Math.random() * (max - min) + min;
  return +randomFloat.toFixed(precision);
}

const getRandomArrayElement = (elements) => {
  const randomArrayIndex = getRandomIntegerInclusive(0, elements.length - 1);

  return elements[randomArrayIndex];
}

const getRandomAvatar = () => {
  const avatarId = '0' + getRandomIntegerInclusive(1, 8);

  return `img/avatars/user${avatarId}.png`;
}

const getRandomlySlicedArray = (inputArray) => {
  const randomStartIndex = getRandomIntegerInclusive(0, inputArray.length - 1);
  const randomEndIndex = randomStartIndex + getRandomIntegerInclusive(0, inputArray.length - 1) + 1;

  return inputArray.slice(randomStartIndex, randomEndIndex);
}

const getAd = () => {
  const ad = {
    author: {
      avatar: getRandomAvatar(),
    },
    offer: {
      title: getRandomArrayElement(OFFER_TITLES),
      price: getRandomIntegerInclusive(1, 1000000000),
      type: getRandomArrayElement(OFFER_TYPES),
      rooms: getRandomIntegerInclusive(1, 1000),
      guests: getRandomIntegerInclusive(1, 1000000000),
      checkin: getRandomArrayElement(TIME_POINTS),
      checkout: getRandomArrayElement(TIME_POINTS),
      features: getRandomlySlicedArray(OFFER_FEATURES),
      description: getRandomArrayElement(OFFER_DESCRIPTION),
      photos: getRandomlySlicedArray(OFFER_PHOTOS),
    },
    location: {
      x: getRandomFloatInclusive(35.65000, 35.70000, 5),
      y: getRandomFloatInclusive(139.70000, 139.80000, 5),
    },
  }

  ad.offer.address = `${ad.location.x}, ${ad.location.y}`;

  return ad;
}

/**
 * Creates array of the give length populated with elements generated by callback function
 *
 * @param {number} length - Length of the array to be created
 * @param {function} cb - Callback function which returns value for each array element
 * @return {object}  Generated array
 */
const getArray = (length = 0, cb) => {
  return Array.from({ length: length }, cb);
}

getArray(ADS_COUNT, getAd);
